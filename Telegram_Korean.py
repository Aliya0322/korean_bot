import asyncio
from aiogram import Dispatcher, F, Bot
from aiogram.filters import CommandStart
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from mistralai import Mistral
from datetime import datetime
from db import Database
import logging
logging.basicConfig(level=logging.INFO)

import sqlite3

from scheduler import schedule_daily_word



from configuration import BOT_TOKEN, API_KEY, MODEL_NAME, MAX_REQUESTS_PER_DAY, user_requests, ADMIN_ID



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Mistral AI
async def get_ai_response(content, prompt):
    try:
        client = Mistral(api_key=API_KEY)

        response = await client.chat.stream_async(
            model=MODEL_NAME,
            messages=[
                {"role": "system", "content": prompt},
                {"role": "user", "content": content},
            ],
        )
        result = ""
        async for chunk in response:
            delta_content = chunk.data.choices[0].delta.content
            if delta_content:
                result += delta_content
        return result or "–û—à–∏–±–∫–∞: –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏."
    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ,session=session
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
dp = Dispatcher()
db = Database('korean_bot.db')



# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
def check_request_limit(user_id):
    today = datetime.now().date()

    if user_id not in user_requests:
        user_requests[user_id] = {"count": 0, "date": today}

    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
    if user_requests[user_id]["date"] != today:
        user_requests[user_id] = {"count": 0, "date": today}

    remaining_requests = MAX_REQUESTS_PER_DAY - user_requests[user_id]["count"]

    if remaining_requests <= 0:
        return "–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω.\n\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞. üëãüèª", False
    return (
        f"–í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –µ—â—ë <b>{remaining_requests} –∑–∞–ø—Ä–æ—Å–æ–≤</b> —Å–µ–≥–æ–¥–Ω—è.\n\n"
        f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üëáüèª</b>",
        True,
    )


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
def update_request_count(user_id):
    if user_id in user_requests:
        user_requests[user_id]["count"] += 1


# –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def create_reply_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ üñç"),
                KeyboardButton(text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç üì©"),
            ],
            [
                KeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª ‚úÖ"),
            ],
            [
                KeyboardButton(text="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫\n TOPIK 1 üá∞üá∑"),
                KeyboardButton(text="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å üß°"),
            ],
        ],
        resize_keyboard=True,
    )


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class TextStates(StatesGroup):
    waiting_for_text_topic = State()
    waiting_for_text_tone = State()
    waiting_for_additional_details = State()


class EssayStates(StatesGroup):
    waiting_for_essay_topic = State()


class SpellCheckStates(StatesGroup):
    waiting_for_text_to_check = State()

class FeedbackStates(StatesGroup):
    waiting_for_user_message = State()

class AdminReplyState(StatesGroup):
    waiting_for_reply = State()


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def start_command(message: Message):
    if message.chat.type == 'private':
        if not db.user_exists(message.from_user.id):
            db.add_user(message.from_user.id)
        await message.answer(
        "ÏïàÎÖïÌïòÏÑ∏Ïöî üá∞üá∑\n\n–ú–µ–Ω—è –∑–æ–≤—É—Ç <b>Lingvo</b>, –∏ —è —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∫–æ—Ä–µ–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –ò–ò.\n\n"
        "–Ø –Ω–∞–∫–æ–ø–∏–ª –æ–±—à–∏—Ä–Ω—ã–µ –∑–Ω–∞–Ω–∏—è, –∏–∑—É—á–∞—è –ª—É—á—à–∏–µ –º–µ—Ç–æ–¥–∏–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è.\n\n‚û°Ô∏è –ö–∞–∂–¥—ã–π –¥–µ–Ω—å —è –ø–æ–º–æ–≥–∞—é"
        " —à–∫–æ–ª—å–Ω–∏–∫–∞–º - <b>–ø–æ–≤—ã—Å–∏—Ç—å —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å</b>, –∞ –≤–∑—Ä–æ—Å–ª—ã–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º - <b>–¥–æ—Å—Ç–∏–≥–∞—Ç—å —É—Å–ø–µ—Ö–∞ –≤ —Ä–∞–±–æ—Ç–µ</b>.\n\n"
        "–° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã —Å–º–æ–∂–µ—à—å —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–≤–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, –ø–æ–≤—ã—Å–∏—Ç—å —Å–≤–æ–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –¥–æ–±–∏—Ç—å—Å—è —É—Å–ø–µ—Ö–∞ –≤ —É—á–µ–±–µ. üåü\n\n"
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üëáüèª</b>",
        reply_markup=create_reply_menu(),
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ üñç"
@dp.message(F.text == "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ üñç")
async def spell_checker(message: Message, state: FSMContext):
    await state.set_state(SpellCheckStates.waiting_for_text_to_check)
    await message.answer(
        "–†–∞–¥ –ø–æ–º–æ—á—å!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç <b>–Ω–∞ –∫–æ—Ä–µ–π—Å–∫–æ–º —è–∑—ã–∫–µ</b>, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é.\n\n"
        " –Ø –∏—Å–ø—Ä–∞–≤–ª—é –æ—à–∏–±–∫–∏ –∏ –æ–±—ä—è—Å–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è üëáüèª",
        reply_markup=create_reply_menu(),
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏
@dp.message(SpellCheckStates.waiting_for_text_to_check)
async def handle_spell_check(message: Message, state: FSMContext):
    processing_message = await message.answer("–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ üïí")
    prompt = ("–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞ –∫–æ—Ä–µ–π—Å–∫–æ–º —è–∑—ã–∫–µ."
              "–ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—è—Å—å —Å—Ç–∏–ª—è –∏ –∫–æ—Ä–æ—Ç–∫–æ –æ–±—ä—è—Å–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è."
              "–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>, <b>–û—à–∏–±–∫–∏:</b>"
              "–û–±—ä—è—Å–Ω—è–π –æ—à–∏–±–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å."
              "–¢—ã —É–º–µ–µ—à—å –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –æ—à–∏–±–∫–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ—Ä–µ–π—Å–∫–æ–º —è–∑—ã–∫–µ.")

    await state.clear()
    await handle_request(message, prompt)
    await processing_message.delete()


# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
async def handle_request(message: Message, prompt):
    user_id = message.from_user.id
    limit_message, within_limit = check_request_limit(user_id)

    if not within_limit:
        await message.answer(limit_message)
        return

    if len(message.text) > 200:
        await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏
    update_request_count(user_id)

    response = await get_ai_response(message.text, prompt)
    await message.answer(response, reply_markup=create_reply_menu())

    # –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫
    limit_message, _ = check_request_limit(user_id)
    await message.answer(limit_message, reply_markup=create_reply_menu())


# –ö–æ–º–∞–Ω–¥–∞ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç"
@dp.message(F.text == "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç üì©")
async def write_text(message: Message, state: FSMContext):
    await state.set_state(TextStates.waiting_for_text_topic)
    await message.answer(
        "–° —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ–º–æ–≥—É!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, –æ —á–µ–º –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å. "
        "–Ø –Ω–∞–ø–∏—à—É –ª—é–±–æ–π —Ç–µ–∫—Å—Ç <b>–Ω–∞ –∫–æ—Ä–µ–π—Å–∫–æ–º —è–∑—ã–∫–µ</b> –¥–ª—è –≤–∞—Å.\n\n"
        "–û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –µ–≥–æ —Ç–µ–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç—Å—Å–µ, —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥—É, –¥–µ–ª–æ–≤–æ–µ –ø–∏—Å—å–º–æ –∏ —Ç. –¥.) üëáüèª",
        reply_markup=create_reply_menu()
    )


# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É —Ç–µ–∫—Å—Ç–∞ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ —Å—Ç–∏–ª–µ —Ç–µ–∫—Å—Ç–∞ (–∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏)
@dp.message(TextStates.waiting_for_text_topic)
async def ask_text_tone(message: Message, state: FSMContext):
    await state.update_data(text_topic=message.text)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ text_topic
    await state.set_state(TextStates.waiting_for_text_tone)

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Å—Ç–∏–ª—è —Ç–µ–∫—Å—Ç–∞
    tone_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìö –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ-—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π", callback_data="tone_Ï°¥ÎåìÎßê")],
        [InlineKeyboardButton(text="üí¨ –ù–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ-—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π", callback_data="tone_Ìï¥ÏöîÏ≤¥")],
        [InlineKeyboardButton(text="üòä –î—Ä—É–∂–µ—Å–∫–∏–π", callback_data="tone_Î∞òÎßê")],
    ])

    await message.answer(
        "–í –∫–∞–∫–æ–º —Å—Ç–∏–ª–µ —Ö–æ—Ç–µ–ª–∏ –±—ã –Ω–∞–ø–∏—Å–∞—Ç—å?\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ üëáüèª",
        reply_markup=tone_keyboard
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@dp.callback_query(F.data.startswith("tone_"))
async def handle_text_tone(callback: CallbackQuery, state: FSMContext):  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤ handle_text_tone
    tone_mapping = {
        "tone_Ï°¥ÎåìÎßê": "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ-–≤–µ–∂–ª–∏–≤—ã–π",
        "tone_Ìï¥ÏöîÏ≤¥": "–ù–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ-–≤–µ–∂–ª–∏–≤—ã–π",
        "tone_Î∞òÎßê": "–î—Ä—É–∂–µ—Å–∫–∏–π"
    }

    chosen_tone = tone_mapping.get(callback.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∏–ª—å")
    await state.update_data(text_tone=chosen_tone)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ text_tone

    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç–∏–ª—å –ø–∏—Å—å–º–∞: <b>{chosen_tone}</b>\n\n"
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ –≤ —Ç–µ–∫—Å—Ç? –ù–∞–ø—Ä–∏–º–µ—Ä, –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã, –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–±–∑–∞—Ü–µ–≤?"
        "\n\n–ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ '–ù–µ—Ç'.",
        parse_mode="HTML"
    )

    await state.set_state(TextStates.waiting_for_additional_details)
    await callback.answer()


@dp.message(TextStates.waiting_for_additional_details)
async def generate_text(message: Message, state: FSMContext):
    user_data = await state.get_data()
    text_topic = user_data.get("text_topic", "")
    text_tone = user_data.get("text_tone", "")
    additional_details = message.text if message.text.lower() != "–Ω–µ—Ç" else ""

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
    prompt = (
        "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤. "
        f"–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∫–æ—Ä–µ–π—Å–∫–æ–º —è–∑—ã–∫–µ –≤ —Å—Ç–∏–ª–µ '{text_tone.lower()}' –Ω–∞ —Ç–µ–º—É '{text_topic}'. "
        "–£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç–µ–∫—Å—Ç –∑–≤—É—á–∏—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–º–µ. "
        "–ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è, —É—á—Ç–∏ –∏—Ö."
    )

    if additional_details:
        prompt += f"\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è: {additional_details}."

    await handle_request(message, prompt)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM
    await state.clear()


@dp.message(F.text == "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫\n TOPIK 1 üá∞üá∑")
async def essay_plan(message: Message):
    subscription_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data="unsubscribe_topik")],
        [InlineKeyboardButton(text="–û—Å—Ç–∞—Ç—å—Å—è", callback_data="stay_subscribed")]
    ])
    await message.answer(
        "–î–∞–Ω–Ω—ã–π –±–æ—Ç —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ–ª–µ–∑–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Å–¥–∞—á–∏ —ç–∫–∑–∞–º–µ–Ω–∞ –ø–æ TOPIK I.\n\n"
        "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=subscription_keyboard
    )

async def update_subscription_status(user_id, action):
    try:
        if action == "unsubscribe":
            db.delete_user(user_id)
        elif action == "resubscribe":
            db.add_user(user_id)
        return True
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

@dp.callback_query(F.data == "unsubscribe_topik")
async def unsubscribe_topik(callback: CallbackQuery):
    user_id = callback.from_user.id

    if await update_subscription_status(user_id, "unsubscribe"):
        resubscribe_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞", callback_data="resubscribe_topik")]
        ])
        await callback.message.answer(
            "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–ª–µ–∑–Ω—ã—Ö —Å–ª–æ–≤.\n\n"
            "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞.",
            reply_markup=resubscribe_keyboard
        )
    else:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await callback.answer()

@dp.callback_query(F.data == "stay_subscribed")
async def stay_subscribed(callback: CallbackQuery):
    await callback.message.answer("–í—ã –æ—Å—Ç–∞–ª–∏—Å—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–ª–µ–∑–Ω—ã—Ö —Å–ª–æ–≤.")
    await callback.answer()

@dp.callback_query(F.data == "resubscribe_topik")
async def resubscribe_topik(callback: CallbackQuery):
    user_id = callback.from_user.id

    if await update_subscription_status(user_id, "resubscribe"):
        await callback.message.answer("–í—ã —Å–Ω–æ–≤–∞ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–ª–µ–∑–Ω—ã—Ö —Å–ª–æ–≤!")
    else:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å üß°"
@dp.message(F.text == "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å üß°")
async def feedback_menu(message: Message):
    feedback_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º üì©", callback_data="write_us")],
        [InlineKeyboardButton(text="–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥—É ‚≠êÔ∏è", callback_data="tell_friend")],
        [InlineKeyboardButton(text="–ù–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã ‚úÖ", callback_data="our_projects")]
    ])
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:\n\n",
        reply_markup=feedback_keyboard
    )

@dp.callback_query(F.data == "write_us")
async def write_us(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–º.")
    await state.set_state(FeedbackStates.waiting_for_user_message)
    await callback.answer()

@dp.message(FeedbackStates.waiting_for_user_message)
async def forward_to_admin(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        user_id = message.from_user.id
        user_name = message.from_user.full_name
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user_id}")]
            ]
        )
        logging.info(f"–°–æ–∑–¥–∞—é –∫–Ω–æ–ø–∫—É '–û—Ç–≤–µ—Ç–∏—Ç—å' –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_name} ({user_id})")
        await bot.send_message(
            ADMIN_ID,
            f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç:\n{user_name}\n\n<b>{message.text}</b>",
            reply_markup=keyboard
        )
        await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!")
        await state.clear()

@dp.callback_query(F.data.startswith("reply_"))
async def ask_admin_reply(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[1])
    user_name = callback.message.text.split("\n")[1]
    await state.update_data(user_id=user_id)
    await state.set_state(AdminReplyState.waiting_for_reply)
    logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–∂–∞–ª '–û—Ç–≤–µ—Ç–∏—Ç—å' –¥–ª—è {user_id}.")
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{user_name}` (id: `{user_id}`):")
    await callback.answer()

@dp.message(AdminReplyState.waiting_for_reply)
async def send_admin_reply(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")
    if not user_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
        return
    try:
        await bot.send_message(user_id, f"üì¢ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}")
        await message.answer(f"‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é c id `{user_id}`.")
        logging.info(f"‚úÖ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {str(e)}")
    await state.clear()

@dp.callback_query(F.data == "tell_friend")
async def tell_friend(callback: CallbackQuery):
    await callback.message.answer(
        "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ: https://t.me/KoreanLangBot  üåü"
    )
    await callback.answer()

@dp.callback_query(F.data == "our_projects")
async def our_projects(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ë–æ—Ç –¥–ª—è –∏–∑—É—á–∞—é—â–∏—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", url="https://t.me/myligvoacademy_bot")
        ],
        [
            InlineKeyboardButton(text="–ë–æ—Ç-–º–æ—Ç–∏–≤–∞—Ç–æ—Ä –¥–ª—è —É—é—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤", url="https://t.me/Motivate_Chat_Bot")
        ]
    ])

    await callback.message.answer(
        "–í–æ—Ç –Ω–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤–∞–º –ø–æ–ª–µ–∑–Ω—ã:",
        reply_markup=keyboard
    )
    await callback.answer()


@dp.message(F.text == "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª ‚úÖ")
async def subscribe_channel(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª üá∞üá∑", url="https://t.me/korea_secrets_aliya")]
    ])

    await message.answer(
        "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –∫–∞–Ω–∞–ª—É —Å –ø–æ–ª–µ–∑–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –ø–æ –∫–æ—Ä–µ–π—Å–∫–æ–º—É —è–∑—ã–∫—É –∏ –Ω–µ —Ç–æ–ª—å–∫–æ!\n\n",
        reply_markup=keyboard,
        disable_web_page_preview=True
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–µ –º–µ–Ω—é
@dp.message()
async def handle_unknown_message(message: Message):
    await message.answer("–ù–µ –ø–æ–Ω—è–ª –≤–∞—Å.\n\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëáüèª",
                         reply_markup=create_reply_menu())



async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    schedule_daily_word()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

